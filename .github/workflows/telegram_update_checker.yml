name: Check and Upload New Telegram Versions (Combined Release)

on:
  schedule:
    - cron: '0 8 * * *' # هر روز ساعت 8 صبح UTC اجرا می‌شود
  workflow_dispatch: # امکان اجرای دستی

jobs:
  check_and_upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write # برای ایجاد ریلیز و آپلود فایل‌ها و کامیت کردن

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install requests beautifulsoup4 packaging

      - name: Get Current Date
        id: date
        run: echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create tracking files if not exists
        run: |
          touch last_known_telegram_desktop_version.txt
          touch last_known_android_size.txt

      # --- Windows Check ---
      - name: Check for Telegram Desktop (Windows) Update
        id: check_telegram_desktop
        run: python scripts/check_telegram.py windows # فرض می‌کنیم اسکریپت شما در پوشه scripts قرار دارد

      # --- Android Check ---
      - name: Check for Telegram Android Update
        id: check_telegram_android
        run: python scripts/check_telegram.py android # فرض می‌کنیم اسکریپت شما در پوشه scripts قرار دارد

      # --- Windows Download (if new) ---
      - name: Download Telegram Desktop (Windows)
        if: steps.check_telegram_desktop.outputs.new_version_available == 'true'
        id: download_desktop
        run: |
          VERSION="${{ steps.check_telegram_desktop.outputs.version }}"
          DOWNLOAD_URL="${{ steps.check_telegram_desktop.outputs.download_url }}"
          FILE_NAME="Telegram_Desktop_v${VERSION}_${{ steps.date.outputs.TODAY }}.exe"
          echo "Downloading Telegram Desktop $VERSION from $DOWNLOAD_URL..."
          curl -L -o "$FILE_NAME" "$DOWNLOAD_URL"
          echo "FILE_PATH=$(pwd)/$FILE_NAME" >> $GITHUB_OUTPUT
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_OUTPUT

      # --- Android Download (if new) ---
      - name: Download Telegram Android
        if: steps.check_telegram_android.outputs.new_version_available == 'true'
        id: download_android
        run: |
          DOWNLOAD_URL="${{ steps.check_telegram_android.outputs.download_url }}"
          FILE_NAME="Telegram_Android_${{ steps.date.outputs.TODAY }}.apk"
          echo "Downloading new Telegram Android from $DOWNLOAD_URL..."
          curl -L -o "$FILE_NAME" "$DOWNLOAD_URL"
          echo "FILE_PATH=$(pwd)/$FILE_NAME" >> $GITHUB_OUTPUT
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_OUTPUT

      # --- Create Release (if any is new and release doesn't exist) ---
      - name: Create Combined Release
        if: steps.check_telegram_desktop.outputs.new_version_available == 'true' || steps.check_telegram_android.outputs.new_version_available == 'true'
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="telegram-updates-${{ steps.date.outputs.TODAY }}"
          RELEASE_TITLE="Telegram Updates (${{ steps.date.outputs.TODAY }})"
          NOTES="Automatic check on ${{ steps.date.outputs.TODAY }}.\n"
          WIN_VER="${{ steps.check_telegram_desktop.outputs.version }}"
          WIN_NEW="${{ steps.check_telegram_desktop.outputs.new_version_available }}"
          AND_NEW="${{ steps.check_telegram_android.outputs.new_version_available }}"

          if [[ "$WIN_NEW" == "true" ]]; then
            NOTES="${NOTES}\n- Windows Desktop v${WIN_VER}"
          fi
          if [[ "$AND_NEW" == "true" ]]; then
            NOTES="${NOTES}\n- Android APK (Size: ${{ steps.check_telegram_android.outputs.current_size }} bytes)"
          fi

          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT # Make tag available to next steps

          # Create release only if it doesn't exist yet
          if ! gh release view "$TAG_NAME" > /dev/null 2>&1; then
            echo "Creating new release $TAG_NAME..."
            gh release create "$TAG_NAME" \
              --title "$RELEASE_TITLE" \
              --notes "$NOTES"
          else
            echo "Release $TAG_NAME already exists. Will upload assets to it."
            # Optionally, you could edit the existing release notes here if needed.
          fi

      # --- Upload Windows (if new) ---
      - name: Upload Telegram Desktop (Windows)
        if: steps.check_telegram_desktop.outputs.new_version_available == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ steps.create_release.outputs.TAG_NAME }}"
          FILE_PATH="${{ steps.download_desktop.outputs.FILE_PATH }}"
          echo "Uploading $FILE_PATH to release $TAG_NAME..."
          gh release upload "$TAG_NAME" "$FILE_PATH" --clobber
          echo "Updating last known Windows version..."
          echo "${{ steps.check_telegram_desktop.outputs.version }}" > last_known_telegram_desktop_version.txt

      # --- Upload Android (if new) ---
      - name: Upload Telegram Android
        if: steps.check_telegram_android.outputs.new_version_available == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ steps.create_release.outputs.TAG_NAME }}"
          FILE_PATH="${{ steps.download_android.outputs.FILE_PATH }}"
          echo "Uploading $FILE_PATH to release $TAG_NAME..."
          gh release upload "$TAG_NAME" "$FILE_PATH" --clobber
          echo "Updating last known Android size..."
          echo "${{ steps.check_telegram_android.outputs.current_size }}" > last_known_android_size.txt

      # --- Commit Tracking Files (if any was new) ---
      - name: Commit version/size tracking files
        if: steps.check_telegram_desktop.outputs.new_version_available == 'true' || steps.check_telegram_android.outputs.new_version_available == 'true'
        run: |
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'actions@github.com'
          git add last_known_telegram_desktop_version.txt last_known_android_size.txt
          # Only commit and push if there are actual changes
          if ! git diff --staged --quiet; then
            git commit -m "Update last known Telegram versions/sizes (${{ steps.date.outputs.TODAY }})"
            git push
          else
            echo "No changes in tracking files to commit."
          fi
